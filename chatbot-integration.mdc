---
description: Integration guide for the next iteration of the chatbot using Vercel AI SDK
globs: packages/plugin/views/ai-chat/**/*
---

# Chatbot Integration Guide

## Architecture Overview

The next iteration of the chatbot follows a hybrid architecture:
- Frontend components live inside the Obsidian plugin
- Backend APIs are hosted in the web application
- Communication via streaming responses using Vercel AI SDK

### Frontend Components (Plugin)

```typescript
// Location: packages/plugin/views/ai-chat/components/Chat.tsx
import { useChat } from '@ai-sdk/react'

export function Chat() {
  const { messages, input, handleInputChange, handleSubmit } = useChat({
    api: '/api/chat',
    id: 'obsidian-chat',
    onResponse: (response) => {
      // Handle streaming responses
    }
  })
}
```

### Backend Integration (Web)

```typescript
// Location: packages/web/api/chat/route.ts
import { StreamingTextResponse, LangChainStream } from 'ai'

export async function POST(request: Request) {
  const { messages, context } = await request.json()
  const { stream, handlers } = LangChainStream()
  
  // Process messages with context
  const result = streamText({
    model: myProvider.languageModel(selectedModel),
    messages,
    tools: {
      // Obsidian-specific tools
      createNote,
      updateNote,
      searchVault
    }
  })

  return new StreamingTextResponse(stream)
}
```

## Key Components

1. **Chat Interface**
   - Real-time message streaming
   - Context-aware responses
   - Tool integration with Obsidian

2. **Message Processing**
   - Streaming responses
   - Context management
   - Error handling

3. **Tool Integration**
   - Note operations
   - Vault search
   - Custom commands

## Implementation Steps

1. **Plugin Setup**
   ```typescript
   // Initialize Vercel AI SDK
   const chatConfig = {
     api: webBackendUrl + '/api/chat',
     headers: {
       Authorization: `Bearer ${apiKey}`
     }
   }
   ```

2. **Backend Configuration**
   ```typescript
   // Configure streaming response
   const streamConfig = {
     experimental_streamData: true,
     experimental_tools: [
       'createNote',
       'updateNote',
       'searchVault'
     ]
   }
   ```

3. **Tool Integration**
   ```typescript
   // Define Obsidian-specific tools
   const tools = {
     createNote: async ({ title, content }) => {
       // Create note in vault
     },
     searchVault: async ({ query }) => {
       // Search vault contents
     }
   }
   ```

## Best Practices

1. **Error Handling**
   - Implement proper error recovery
   - Handle network issues
   - Provide user feedback

2. **Performance**
   - Use streaming for real-time updates
   - Implement proper caching
   - Handle large messages efficiently

3. **Security**
   - Validate user input
   - Implement rate limiting
   - Secure API endpoints
