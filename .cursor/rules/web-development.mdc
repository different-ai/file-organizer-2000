---
description: Web  package
globs: 
---
# Web Package Development Guide

## Overview
The web package (`packages/web/`) is a Next.js application that serves as the central hub for user management, billing, and AI functionality. It provides the web interface and API endpoints for the Note Companion application.

## Structure

### Core Directories

#### 1. `/app`
The main application directory using Next.js App Router architecture.

- `/app/api/` - Backend API endpoints
  - `/(new-ai)/` - AI-related functions and endpoints
  - `/auth/` - Authentication endpoints
  - `/billing/` - Payment and subscription endpoints
  
- `/app/dashboard/` - User dashboard interface
- `/app/sign-in/` - Authentication pages
- `/app/components/` - Page-specific components
- `/app/layout.tsx` - Root layout with providers
- `/app/page.tsx` - Landing page
- `/app/actions.ts` - Server actions
- `/app/providers.tsx` - Global providers (auth, theme, etc.)

#### 2. `/components`
Shared UI components used across the application.

- `/components/ui/` - Base UI components (buttons, inputs, etc.)
- `pricing-cards.tsx` - Subscription pricing components
- `user-management.tsx` - User management interface components

#### 3. `/lib`
Utility functions and shared logic.

#### 4. `/drizzle`
Database schema and utilities.

- `schema.ts` - Database tables and relationships
- Handles user usage tracking
- Subscription management
- Token usage monitoring

### Important Files

1. `package.json`
   - Dependencies and scripts
   - Project configuration

2. `middleware.ts`
   - Request middleware
   - Authentication checks
   - API route protection

3. `next.config.js`
   - Next.js configuration
   - Environment variables
   - Build settings

4. `.env`
   - Environment variables
   - API keys
   - Database credentials

## Responsibilities

### 1. User Management
- Authentication (via Clerk)
- User profile management
- Access control
- Session handling

### 2. Billing and Subscriptions
- Payment processing (via Stripe)
- Subscription management
- Usage tracking
- Token allocation

### 3. AI Integration
- AI model integration
- Context management
- Token usage tracking
- Rate limiting
- Tool execution

### 4. Database Operations
- User data storage
- Usage statistics
- Subscription records
- Token tracking

### 5. API Services
- RESTful endpoints
- WebSocket connections
- External service integration
- Error handling

## Best Practices

1. **Code Organization**
   - Use TypeScript for type safety
   - Follow Next.js conventions
   - Implement proper error handling
   - Use React Server Components when possible

2. **Security**
   - Protect sensitive routes
   - Validate user input
   - Handle authentication properly
   - Secure API endpoints

3. **Performance**
   - Implement caching strategies
   - Optimize database queries
   - Use proper loading states
   - Handle rate limiting

4. **UI/UX**
   - Follow design system
   - Implement responsive design
   - Use proper loading states
   - Handle errors gracefully

5. **Testing**
   - Write unit tests
   - Implement integration tests
   - Test error scenarios
   - Validate API responses

## Environment Setup
Required environment variables:
- Database credentials
- API keys (OpenAI, Anthropic, etc.)
- Authentication secrets
- Payment processing keys

## Development Workflow
1. Use pnpm for package management
2. Follow conventional commits
3. Test locally before deployment
4. Use feature branches
5. Document API changes 