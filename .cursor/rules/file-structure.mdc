---
description: 
globs: 
---
# File Organizer Implementation Guide

## Overview
File Organizer is a comprehensive note management system built for Obsidian, consisting of three main packages:
- `packages/plugin/` - Obsidian plugin implementation
- `packages/web/` - Next.js web application
- `packages/mobile/` - Mobile application (React Native/Expo)

## Core Functionality

### 1. File Processing Pipeline
```typescript
// Processing steps in sequence
1. preprocess() // Validate and prepare files
2. extract() // Extract text content
3. classify() // AI-based classification
4. tag() // Automatic tagging
5. format() // Content formatting
6. move() // File organization
```

### 2. Directory Structure
- `/packages/plugin/` - Obsidian plugin core
- `/packages/web/` - Web application and AI endpoints
- `/packages/web/app/api/(new-ai)` - AI-related functions
- `/packages/mobile/` - Mobile application

### 3. Key Components

#### Plugin (Obsidian Integration)
- File system operations
- Inbox monitoring
- Event handling
- Record management

#### Web Application
- AI processing endpoints
- User authentication
- API integrations
- Dashboard interface

#### Mobile Application
- Cross-platform access
- File viewing/editing
- Sync capabilities
- OAuth authentication

## Implementation Details

### 1. Pipeline Steps

#### Preprocessing
- File type validation
- License verification
- Content preparation
- Initial cleanup

#### AI Processing
```typescript
// Two-phase processing
1. API Call Phase
   - Get AI recommendations
   - Process response

2. Application Phase
   - Apply classifications
   - Update metadata
   - Modify content
```

#### File Organization
- Tag management
- Folder structure
- Move operations
- History tracking

### 2. Record Management
- Step logging
- Progress tracking
- Error handling
- Performance metrics

### 3. Integration Points
- Obsidian API
- AI services
- File system
- Mobile sync

## Tools and Utilities

### 1. AI Tools
- Classification models
- Content analysis
- Tag suggestion
- Format optimization

### 2. File Operations
- Move/Copy
- Tag management
- Content modification
- History tracking

### 3. User Interface
- Progress indicators
- Status updates
- Error messages
- Configuration options

## Best Practices

### 1. File Processing
- Validate before processing
- Maintain atomic operations
- Implement proper error recovery
- Cache results when possible

### 2. AI Integration
- Rate limit API calls
- Handle timeout gracefully
- Implement fallback options
- Monitor token usage

### 3. User Experience
- Provide clear feedback
- Maintain processing history
- Allow manual intervention
- Support undo operations

### 4. Security
- Validate file access
- Secure API endpoints
- Handle permissions
- Protect user data

## Configuration

### 1. Environment Setup
```typescript
// Required configurations
1. API keys
2. Endpoints
3. File paths
4. Processing rules
```

### 2. Processing Rules
- File type filters
- Classification rules
- Tag templates
- Format specifications

### 3. Integration Settings
- API endpoints
- Authentication
- Rate limits
- Timeout values

## Error Handling

### 1. Pipeline Errors
- Step failure recovery
- Partial completion
- Rollback support
- Error logging

### 2. AI Service Errors
- Timeout handling
- Rate limit management
- Alternative processing
- Fallback options

### 3. File System Errors
- Access issues
- Space constraints
- Permission problems
- Sync conflicts

## Performance Considerations

### 1. Processing Optimization
- Batch operations
- Caching strategies
- Resource management
- Queue handling

### 2. AI Usage
- Token optimization
- Request batching
- Response caching
- Model selection

### 3. Mobile Performance
- Offline support
- Sync efficiency
- Battery usage
- Data optimization 